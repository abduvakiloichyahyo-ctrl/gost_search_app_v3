from flask import Flask, render_template_string, request, redirect, url_for
import json, os, base64, requests

app = Flask(__name__)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
DATA_FILE = "gost_data.json"
GITHUB_USER = os.environ.get("GITHUB_USER")
GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {"gosts": {}, "ai_history": []}
    return {"gosts": {}, "ai_history": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    if GITHUB_USER and GITHUB_REPO and GITHUB_TOKEN:
        try:
            push_to_github(DATA_FILE)
        except Exception as e:
            print("‚ö† –û—à–∏–±–∫–∞ push –≤ GitHub:", e)

def get_github_headers():
    return {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

def push_to_github(path):
    with open(path, "rb") as f:
        content = f.read()
    encoded = base64.b64encode(content).decode("utf-8")
    url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/{DATA_FILE}"
    headers = get_github_headers()
    r = requests.get(url, headers=headers)
    sha = r.json().get("sha") if r.status_code == 200 else None
    payload = {"message": "Auto-update gost_data.json", "content": encoded}
    if sha:
        payload["sha"] = sha
    put = requests.put(url, headers=headers, json=payload)
    if put.status_code not in (200, 201):
        raise RuntimeError(f"GitHub API error {put.status_code}: {put.text}")

# ---------- AI (—á–µ—Ä–µ–∑ OpenRouter) ----------
def ask_openrouter(prompt):
    if not OPENROUTER_API_KEY:
        return "‚ö† –û—à–∏–±–∫–∞: –∫–ª—é—á OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-4-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code != 200:
        return f"‚ö† –û—à–∏–±–∫–∞ OpenRouter API: {response.text}"
    return response.json()["choices"][0]["message"]["content"].strip()

# ---------- HTML —à–∞–±–ª–æ–Ω—ã ----------
TEMPLATE_INDEX = """<!doctype html>
<html><head><meta charset="utf-8"><title>–ì–û–°–¢ –ú–µ–Ω–µ–¥–∂–µ—Ä</title>
<style>
body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;text-align:center;padding:40px;}
a{display:inline-block;margin:8px;padding:10px 16px;background:#1f6feb;border-radius:8px;color:#fff;text-decoration:none;}
a.secondary{background:#2d2f33}
</style></head>
<body>
  <h1>–ì–û–°–¢ –ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
  <p>
    <a href="{{ url_for('list_gosts') }}">üìã –°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤</a>
    <a href="{{ url_for('add_gost') }}" class="secondary">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</a>
    <a href="{{ url_for('ai_search') }}">ü§ñ AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤</a>
    <a href="{{ url_for('ai_history') }}" class="secondary">üïò –ò—Å—Ç–æ—Ä–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤</a>
  </p>
  <p style="opacity:0.8">–•—Ä–∞–Ω–∏–ª–∏—â–µ: <b>{{ data_file }}</b></p>
</body></html>
"""

TEMPLATE_LIST = """<!doctype html>
<html><head><meta charset="utf-8"><title>–°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤</title>
<style>
body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:20px;}
.wrap{max-width:900px;margin:20px auto;background:rgba(255,255,255,0.03);padding:16px;border-radius:10px;}
table{width:100%;border-collapse:collapse;color:#fff;}
th,td{padding:10px;border-bottom:1px solid rgba(255,255,255,0.04);text-align:left;}
a.btn{padding:6px 10px;background:#ff4d4d;color:#fff;border-radius:6px;text-decoration:none;}
.top{margin-bottom:12px;}
</style></head>
<body><div class="wrap">
<div class="top"><a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a> | <a href="{{ url_for('add_gost') }}">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</a></div>
<h2>üìã –°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤ ({{ gosts|length }})</h2>
<table><tr><th>–ù–æ–º–µ—Ä</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
{% for num, text in gosts.items() %}
<tr><td><b>{{ num }}</b></td><td style="white-space:pre-wrap;">{{ text }}</td>
<td><a href="{{ url_for('edit_gost', gost=num) }}">‚úèÔ∏è</a>
<a href="{{ url_for('delete_gost', gost=num) }}" class="btn" onclick="return confirm('–£–¥–∞–ª–∏—Ç—å {{ num }} ?')">üóë</a></td></tr>
{% endfor %}
</table></div></body></html>
"""

TEMPLATE_ADD = """<!doctype html>
<html><head><meta charset="utf-8"><title>–î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}input,textarea{width:100%;padding:8px;margin:6px 0;border-radius:6px;border:1px solid #333}button{padding:10px 14px;border-radius:8px;background:#1f6feb;color:#fff;border:none}</style>
</head><body><h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</h2>
<form method="post">
  <input name="gost_number" placeholder="–ù–æ–º–µ—Ä –ì–û–°–¢" required>
  <textarea name="gost_text" rows="6" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" required></textarea>
  <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
</form>
<p><a href="{{ url_for('list_gosts') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body></html>
"""

TEMPLATE_EDIT = """<!doctype html>
<html><head><meta charset="utf-8"><title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ì–û–°–¢</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}textarea{width:100%;padding:8px;margin:6px 0;border-radius:6px;border:1px solid #333}button{padding:10px 14px;border-radius:8px;background:#1f6feb;color:#fff;border:none}</style>
</head><body><h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {{ gost }}</h2>
<form method="post">
  <textarea name="gost_text" rows="8" required>{{ text }}</textarea>
  <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
</form>
<p><a href="{{ url_for('list_gosts') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body></html>
"""

TEMPLATE_AI_SEARCH = """<!doctype html>
<html><head><meta charset="utf-8"><title>AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}input{width:80%;padding:8px;border-radius:6px;border:1px solid #333}button{padding:8px 12px;border-radius:6px;background:#1f6feb;color:#fff;border:none}.result{background:rgba(255,255,255,0.03);padding:12px;border-radius:8px;margin-top:16px;white-space:pre-wrap}</style>
</head><body>
<h2>ü§ñ AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤</h2>
<form method="post"><input name="product_name" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –®–ª–∞–Ω–≥ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–π" required>
<button type="submit">–ò—Å–∫–∞—Ç—å</button></form>
{% if result %}
<div class="result"><b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b><div>{{ result }}</div>
<form method="post" action="{{ url_for('ai_save_to_gosts') }}">
<input type="hidden" name="product_name" value="{{ product_name }}">
<input type="hidden" name="ai_text" value="{{ result|replace('\\n','\\\\n') }}">
<button type="submit" style="margin-top:10px">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ì–û–°–¢</button>
</form></div>
{% endif %}
<p><a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body></html>
"""

TEMPLATE_AI_HISTORY = """<!doctype html>
<html><head><meta charset="utf-8"><title>–ò—Å—Ç–æ—Ä–∏—è AI</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}.item{background:rgba(255,255,255,0.03);padding:12px;margin-bottom:10px;border-radius:8px;white-space:pre-wrap}</style>
</head><body><h2>üïò –ò—Å—Ç–æ—Ä–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤</h2><a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a>
{% for it in history %}<div class="item"><b>–ó–∞–ø—Ä–æ—Å:</b> {{ it['query'] }}<br><b>–û—Ç–≤–µ—Ç:</b><br>{{ it['answer'] }}</div>{% endfor %}
</body></html>
"""

# ---------- Flask –º–∞—Ä—à—Ä—É—Ç—ã ----------
@app.route("/")
def index():
    return render_template_string(TEMPLATE_INDEX, data_file=DATA_FILE)

@app.route("/list")
def list_gosts():
    return render_template_string(TEMPLATE_LIST, gosts=load_data().get("gosts", {}))

@app.route("/add", methods=["GET", "POST"])
def add_gost():
    if request.method == "POST":
        data = load_data()
        data["gosts"][request.form["gost_number"].strip()] = request.form["gost_text"].strip()
        save_data(data)
        return redirect(url_for("list_gosts"))
    return render_template_string(TEMPLATE_ADD)

@app.route("/edit/<gost>", methods=["GET", "POST"])
def edit_gost(gost):
    data = load_data()
    if request.method == "POST":
        data["gosts"][gost] = request.form["gost_text"].strip()
        save_data(data)
        return redirect(url_for("list_gosts"))
    return render_template_string(TEMPLATE_EDIT, gost=gost, text=data["gosts"].get(gost, ""))

@app.route("/delete/<gost>")
def delete_gost(gost):
    data = load_data()
    if gost in data["gosts"]:
        del data["gosts"][gost]
        save_data(data)
    return redirect(url_for("list_gosts"))

@app.route("/ai_search", methods=["GET", "POST"])
def ai_search():
    result, product_name = None, ""
    if request.method == "POST":
        product_name = request.form["product_name"].strip()
        prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ì–û–°–¢.
–î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ "{product_name}" –ø–æ–¥–±–µ—Ä–∏ 3‚Äì6 –ì–û–°–¢–æ–≤ –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –∏—Ö —Å–º—ã—Å–ª."""
        answer = ask_openrouter(prompt)
        data = load_data()
        data.setdefault("ai_history", []).insert(0, {"query": product_name, "answer": answer})
        data["ai_history"] = data["ai_history"][:100]
        save_data(data)
        result = answer
    return render_template_string(TEMPLATE_AI_SEARCH, result=result, product_name=product_name)

@app.route("/ai_save_to_gosts", methods=["POST"])
def ai_save_to_gosts():
    data = load_data()
    name = f"AI: {request.form['product_name']}"
    text = request.form["ai_text"]
    i, key = 1, name
    while key in data["gosts"]:
        i += 1
        key = f"{name} ({i})"
    data["gosts"][key] = text
    save_data(data)
    return redirect(url_for("list_gosts"))

@app.route("/ai_history")
def ai_history():
    return render_template_string(TEMPLATE_AI_HISTORY, history=load_data().get("ai_history", []))

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
