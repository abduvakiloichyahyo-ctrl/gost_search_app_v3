from flask import Flask, render_template_string, request, redirect, url_for
import json
import os
import base64
import requests
from openai import OpenAI

app = Flask(__name__)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
DATA_FILE = "gost_data.json"
GITHUB_USER = os.environ.get("GITHUB_USER")
GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI client (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π SDK)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ----------
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ gosts –∏ ai_history."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return {"gosts": {}, "ai_history": []}
    else:
        return {"gosts": {}, "ai_history": []}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—à–∏—Ç—å –≤ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)."""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã)
    if GITHUB_USER and GITHUB_REPO and GITHUB_TOKEN:
        try:
            push_to_github(DATA_FILE)
        except Exception as e:
            print("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ push –Ω–∞ GitHub:", e)

# ---------- GitHub sync ----------
def get_github_api_headers():
    return {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

def push_to_github(path_on_disk):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
    repos/{GITHUB_USER}/{GITHUB_REPO}/contents/{DATA_FILE}
    """
    if not (GITHUB_USER and GITHUB_REPO and GITHUB_TOKEN):
        raise RuntimeError("GitHub credentials not set")

    with open(path_on_disk, "rb") as f:
        content = f.read()
    encoded = base64.b64encode(content).decode("utf-8")

    url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/{DATA_FILE}"
    headers = get_github_api_headers()

    # –£–∑–Ω–∞–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å sha
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        sha = r.json().get("sha")
    else:
        sha = None

    payload = {
        "message": "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ gost_data.json —á–µ—Ä–µ–∑ —Å–∞–π—Ç",
        "content": encoded
    }
    if sha:
        payload["sha"] = sha

    put = requests.put(url, headers=headers, json=payload)
    if put.status_code not in (200, 201):
        # –í—ã–∫–∏–¥—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –µ—ë –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        raise RuntimeError(f"GitHub API error {put.status_code}: {put.text}")

# ---------- HTML —à–∞–±–ª–æ–Ω—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ) ----------
TEMPLATE_INDEX = """<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–ì–û–°–¢ –ú–µ–Ω–µ–¥–∂–µ—Ä</title>
  <style>
    body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;text-align:center;padding:40px;}
    a{display:inline-block;margin:8px;padding:10px 16px;background:#1f6feb;border-radius:8px;color:#fff;text-decoration:none;}
    a.secondary{background:#2d2f33}
  </style>
</head>
<body>
  <h1>–ì–û–°–¢ –ú–µ–Ω–µ–¥–∂–µ—Ä</h1>
  <p>
    <a href="{{ url_for('list_gosts') }}">üìã –°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤</a>
    <a href="{{ url_for('add_gost') }}" class="secondary">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</a>
    <a href="{{ url_for('ai_search') }}">ü§ñ AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤</a>
    <a href="{{ url_for('ai_history') }}" class="secondary">üïò –ò—Å—Ç–æ—Ä–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤</a>
  </p>
  <p style="opacity:0.8">–•—Ä–∞–Ω–∏–ª–∏—â–µ: <b>{{ data_file }}</b></p>
</body>
</html>
"""

TEMPLATE_LIST = """<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤</title>
  <style>
    body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:20px;}
    .wrap{max-width:900px;margin:20px auto;background:rgba(255,255,255,0.03);padding:16px;border-radius:10px;}
    table{width:100%;border-collapse:collapse;color:#fff;}
    th,td{padding:10px;border-bottom:1px solid rgba(255,255,255,0.04);text-align:left;vertical-align:top;}
    a.btn{padding:6px 10px;background:#ff4d4d;color:#fff;border-radius:6px;text-decoration:none;}
    .top{margin-bottom:12px;}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="top">
      <a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a> | <a href="{{ url_for('add_gost') }}">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</a>
    </div>
    <h2>üìã –°–ø–∏—Å–æ–∫ –ì–û–°–¢–æ–≤ ({{ gosts|length }})</h2>
    <table>
      <tr><th>–ù–æ–º–µ—Ä</th><th>–¢–µ–∫—Å—Ç / –û–ø–∏—Å–∞–Ω–∏–µ</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
      {% for num, text in gosts.items() %}
      <tr>
        <td><b>{{ num }}</b></td>
        <td style="white-space:pre-wrap;">{{ text }}</td>
        <td>
          <a href="{{ url_for('edit_gost', gost=num) }}">‚úèÔ∏è</a>
          <a href="{{ url_for('delete_gost', gost=num) }}" class="btn" onclick="return confirm('–£–¥–∞–ª–∏—Ç—å {{ num }} ?')">üóë –£–¥–∞–ª–∏—Ç—å</a>
        </td>
      </tr>
      {% endfor %}
    </table>
  </div>
</body>
</html>
"""

TEMPLATE_ADD = """<!doctype html>
<html>
<head><meta charset="utf-8"><title>–î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}input,textarea{width:100%;padding:8px;margin:6px 0;border-radius:6px;border:1px solid #333}button{padding:10px 14px;border-radius:8px;background:#1f6feb;color:#fff;border:none}</style>
</head>
<body>
  <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –ì–û–°–¢</h2>
  <form method="post">
    <input name="gost_number" placeholder="–ù–æ–º–µ—Ä –ì–û–°–¢ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–û–°–¢ 12345-67)" required>
    <textarea name="gost_text" rows="6" placeholder="–¢–µ–∫—Å—Ç / –æ–ø–∏—Å–∞–Ω–∏–µ / –ø—É–Ω–∫—Ç—ã –ì–û–°–¢–∞" required></textarea>
    <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
  </form>
  <p><a href="{{ url_for('list_gosts') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body>
</html>
"""

TEMPLATE_EDIT = """<!doctype html>
<html>
<head><meta charset="utf-8"><title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ì–û–°–¢</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}textarea{width:100%;padding:8px;margin:6px 0;border-radius:6px;border:1px solid #333}button{padding:10px 14px;border-radius:8px;background:#1f6feb;color:#fff;border:none}</style>
</head>
<body>
  <h2>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {{ gost }}</h2>
  <form method="post">
    <textarea name="gost_text" rows="8" required>{{ text }}</textarea>
    <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
  </form>
  <p><a href="{{ url_for('list_gosts') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body>
</html>
"""

TEMPLATE_AI_SEARCH = """<!doctype html>
<html>
<head><meta charset="utf-8"><title>AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}input{width:80%;padding:8px;border-radius:6px;border:1px solid #333}button{padding:8px 12px;border-radius:6px;background:#1f6feb;color:#fff;border:none}.result{background:rgba(255,255,255,0.03);padding:12px;border-radius:8px;margin-top:16px;white-space:pre-wrap}</style>
</head>
<body>
  <h2>ü§ñ AI –ü–æ–∏—Å–∫ –ì–û–°–¢–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ü–∏–∏</h2>
  <form method="post">
    <input name="product_name" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –®–ª–∞–Ω–≥ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞" required>
    <button type="submit">–ò—Å–∫–∞—Ç—å</button>
  </form>

  {% if result %}
    <div class="result">
      <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
      <div>{{ result }}</div>
      <form method="post" action="{{ url_for('ai_save_to_gosts') }}">
        <input type="hidden" name="product_name" value="{{ product_name }}">
        <input type="hidden" name="ai_text" value="{{ result|replace('\n','\\n') }}">
        <button type="submit" style="margin-top:10px">üíæ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ì–û–°–¢ (—á–µ—Ä–Ω–æ–≤–∏–∫)</button>
      </form>
    </div>
  {% endif %}

  <p><a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
</body>
</html>
"""

TEMPLATE_AI_HISTORY = """<!doctype html>
<html>
<head><meta charset="utf-8"><title>–ò—Å—Ç–æ—Ä–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤</title>
<style>body{font-family:Segoe UI,Arial;background:#0b0f14;color:#fff;padding:30px}.item{background:rgba(255,255,255,0.03);padding:12px;margin-bottom:10px;border-radius:8px;white-space:pre-wrap}</style>
</head>
<body>
  <h2>üïò –ò—Å—Ç–æ—Ä–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤</h2>
  <p><a href="{{ url_for('index') }}">‚¨Ö –ù–∞–∑–∞–¥</a></p>
  {% for it in history %}
    <div class="item"><b>–ó–∞–ø—Ä–æ—Å:</b> {{ it['query'] }}<br><b>–û—Ç–≤–µ—Ç:</b><br>{{ it['answer'] }}</div>
  {% endfor %}
</body>
</html>
"""

# ---------- Flask –º–∞—Ä—à—Ä—É—Ç—ã ----------
@app.route("/")
def index():
    return render_template_string(TEMPLATE_INDEX, data_file=DATA_FILE)

@app.route("/list")
def list_gosts():
    data = load_data()
    gosts = data.get("gosts", {})
    return render_template_string(TEMPLATE_LIST, gosts=gosts)

@app.route("/add", methods=["GET", "POST"])
def add_gost():
    if request.method == "POST":
        gost_number = request.form["gost_number"].strip()
        gost_text = request.form["gost_text"].strip()
        data = load_data()
        gosts = data.setdefault("gosts", {})
        gosts[gost_number] = gost_text
        save_data(data)
        return redirect(url_for("list_gosts"))
    return render_template_string(TEMPLATE_ADD)

@app.route("/edit/<gost>", methods=["GET", "POST"])
def edit_gost(gost):
    data = load_data()
    gosts = data.setdefault("gosts", {})
    if request.method == "POST":
        gosts[gost] = request.form["gost_text"].strip()
        save_data(data)
        return redirect(url_for("list_gosts"))
    text = gosts.get(gost, "")
    return render_template_string(TEMPLATE_EDIT, gost=gost, text=text)

@app.route("/delete/<gost>")
def delete_gost(gost):
    data = load_data()
    gosts = data.setdefault("gosts", {})
    if gost in gosts:
        del gosts[gost]
        save_data(data)
    return redirect(url_for("list_gosts"))

# ---------- AI –ø–æ–∏—Å–∫ ----------
@app.route("/ai_search", methods=["GET", "POST"])
def ai_search():
    result = None
    product_name = ""
    if request.method == "POST":
        product_name = request.form["product_name"].strip()
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑–¥–µ–ª–∏—è: "{product_name}" –ø—Ä–µ–¥–ª–æ–∂–∏ 3-6 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –ì–û–°–¢–æ–≤ (–ø–æ –Ω–æ–º–µ—Ä—É –∏ –∫—Ä–∞—Ç–∫–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è.
–§–æ—Ä–º–∞—Ç:
–ì–û–°–¢ XXXX ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
–ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –ì–û–°–¢–æ–≤ –Ω–µ—Ç, –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã/–∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å."""
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.25,
                max_tokens=500
            )
            answer = response.choices[0].message.content.strip()
        except Exception as e:
            answer = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é AI
        data = load_data()
        history = data.setdefault("ai_history", [])
        history.insert(0, {"query": product_name, "answer": answer})
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∑–∞–ø–∏—Å–µ–π
        data["ai_history"] = history[:100]
        save_data(data)

        result = answer

    return render_template_string(TEMPLATE_AI_SEARCH, result=result, product_name=product_name)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è AI-–æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ì–û–°–¢–∞
@app.route("/ai_save_to_gosts", methods=["POST"])
def ai_save_to_gosts():
    product_name = request.form.get("product_name", "AI-—Ä–µ–∑—É–ª—å—Ç–∞—Ç").strip()
    ai_text = request.form.get("ai_text", "").strip()
    data = load_data()
    gosts = data.setdefault("gosts", {})
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π: AI: –Ω–∞–∑–≤–∞–Ω–∏–µ + –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    base_key = f"AI: {product_name}"
    key = base_key
    i = 1
    while key in gosts:
        i += 1
        key = f"{base_key} ({i})"
    gosts[key] = ai_text
    save_data(data)
    return redirect(url_for("list_gosts"))

@app.route("/ai_history")
def ai_history():
    data = load_data()
    history = data.get("ai_history", [])
    return render_template_string(TEMPLATE_AI_HISTORY, history=history)

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
